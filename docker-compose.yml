networks:
  main:
    name: ${PROJECT_TAG}-main
    driver: bridge

volumes:
  rabbitmq-data:
    name: ${PROJECT_TAG}-rabbitmq-data
  postgres-data:
    name: ${PROJECT_TAG}-postgres-data
  prometheus-data:
    name: ${PROJECT_TAG}-prometheus-data
  grafana-storage:
    name: ${PROJECT_TAG}-grafana-storage
  redis-data:
    name: ${PROJECT_TAG}-redis-data

secrets:
  grafana:
    file: ./secrets/grafana.txt
  smtp:
    file: ./secrets/smtp.txt
  access-token:
    file: ./secrets/access-token.txt
  refresh-token:
    file: ./secrets/refresh-token.txt

services:
  grafana:
    build:
      context: ./infrastructure/grafana
    container_name: ${PROJECT_TAG}-grafana
    restart: always
    networks:
      - main
    ports:
      - 9000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
    secrets:
      - grafana
  prometheus:
    build:
      context: ./infrastructure/prometheus
    container_name: ${PROJECT_TAG}-prometheus
    restart: always
    networks:
      - main
    expose:
      - 9090
    volumes:
      - prometheus-data:/prometheus

  nginx:
    build:
      context: ./infrastructure/nginx
    container_name: ${PROJECT_TAG}-nginx
    restart: always
    networks:
      - main
    expose:
      - ${NGINX_PORT}
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
      - ${NGINX_SSL_PORT}:${NGINX_SSL_PORT}

  rabbitmq:
    build:
      context: ./infrastructure/rabbitmq
    container_name: ${PROJECT_TAG}_rabbitmq
    restart: always
    networks:
      - main
    expose:
      - ${RABBITMQ_PORT}
      - 15692
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  postgres:
    build:
      context: ./infrastructure/postgres
    container_name: ${PROJECT_TAG}-postgres
    restart: always
    networks:
      - main
    expose:
      - ${POSTGRES_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql/data
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: ${PROJECT_TAG}-postgres-exporter
    restart: always
    networks:
      - main
    depends_on:
      - postgres
    expose:
      - 9187
    environment:
      - TZ
      - DATA_SOURCE_URI=${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}

  redis:
    build:
      context: ./infrastructure/redis
    container_name: ${PROJECT_TAG}-redis
    restart: always
    networks:
      - main
    expose:
      - ${REDIS_PORT}
    volumes:
      - redis-data:/data
  redis-exporter:
    image: oliver006/redis_exporter
    container_name: ${PROJECT_TAG}-redis-exporter
    restart: always
    networks:
      - main
    depends_on:
      - redis
    expose:
      - 9121
    environment:
      - TZ
      - REDIS_ADDR=redis://${REDIS_HOST}:${REDIS_PORT}
      - REDIS_USER
      - REDIS_PASSWORD

  api:
    build:
      context: .
      dockerfile: ./apps/backend/api/Dockerfile
    container_name: ${PROJECT_TAG}-api
    restart: always
    depends_on:
      - rabbitmq
      - postgres
      - redis
    networks:
      - main
    expose:
      - ${API_PORT}
    secrets:
      - access-token
      - refresh-token
  mailer:
    build:
      context: .
      dockerfile: ./apps/backend/mailer/Dockerfile
    container_name: ${PROJECT_TAG}-mailer
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - main
    expose:
      - ${MAILER_PORT}
    secrets:
      - smtp
  panel-react:
    build:
      context: .
      dockerfile: ./apps/frontend/panel-react/Dockerfile
    container_name: ${PROJECT_TAG}-panel-react
    restart: always
    networks:
      - main
    expose:
      - ${PANEL_REACT_PORT}
    environment:
      - HOSTNAME=${PANEL_REACT_HOST}
      - PORT=${PANEL_REACT_PORT}
  panel-vue:
    build:
      context: .
      dockerfile: ./apps/frontend/panel-vue/Dockerfile
    container_name: ${PROJECT_TAG}-panel-vue
    restart: always
    networks:
      - main
    expose:
      - ${PANEL_VUE_PORT}
    environment:
      - HOSTNAME=${PANEL_VUE_HOST}
      - PORT=${PANEL_VUE_PORT}
